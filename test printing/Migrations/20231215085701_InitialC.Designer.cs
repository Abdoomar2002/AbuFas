// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using test_printing;

namespace AbuFas.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231215085701_InitialC")]
    partial class InitialC
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32");

            modelBuilder.Entity("test_printing.db.BillData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BillsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kyrat")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<double>("Type")
                        .HasColumnType("REAL");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("BillsId");

                    b.ToTable("BillData");
                });

            modelBuilder.Entity("test_printing.db.Bills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DaystaticMoneyId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBuy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<double>("Total")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("DaystaticMoneyId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("test_printing.db.DayStaticGrams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Bouns")
                        .HasColumnType("REAL");

                    b.Property<double>("Buy")
                        .HasColumnType("REAL");

                    b.Property<double>("Damaged")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<double>("Minus")
                        .HasColumnType("REAL");

                    b.Property<double>("Sell")
                        .HasColumnType("REAL");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DayStaticGrams");
                });

            modelBuilder.Entity("test_printing.db.DaystaticMoney", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<double>("Total")
                        .HasColumnType("REAL");

                    b.Property<bool>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DaystaticMoney");
                });

            modelBuilder.Entity("test_printing.db.IncomeOutcome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DaystaticMoneyId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsIncome")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("DaystaticMoneyId");

                    b.ToTable("IncomeOutcome");
                });

            modelBuilder.Entity("test_printing.db.BillData", b =>
                {
                    b.HasOne("test_printing.db.Bills", null)
                        .WithMany("Data")
                        .HasForeignKey("BillsId");
                });

            modelBuilder.Entity("test_printing.db.Bills", b =>
                {
                    b.HasOne("test_printing.db.DaystaticMoney", null)
                        .WithMany("Bills")
                        .HasForeignKey("DaystaticMoneyId");
                });

            modelBuilder.Entity("test_printing.db.IncomeOutcome", b =>
                {
                    b.HasOne("test_printing.db.DaystaticMoney", null)
                        .WithMany("IncomeOutCome")
                        .HasForeignKey("DaystaticMoneyId");
                });
#pragma warning restore 612, 618
        }
    }
}
